[
{
	"uri": "https://cest.io/tech/rpi-socat/",
	"title": "Prometheus: Docker metrics",
	"tags": [],
	"description": "",
	"content": " \nSocat for Docker Swarm on Raspberry Pi\nYou\u0026rsquo;ll need this if youâ€˜d like to get the metrics of the docker daemon into prometheus. Since every docker installation has it\u0026rsquo;s own metrics you\u0026rsquo;ll need something small between your running daemon and prometheus to differentiate and not only get the ones from the hostmachine where prometheus is actually running.\nThats what we want to achieve: graph LR; A[Prometheus]--|TCP listen| B(socat#1) A[Prometheus]--|TCP listen| C(socat#2) A[Prometheus]--|TCP listen| D(socat#n) B -- |Output| F[DockerD#1] C -- |Output| G[DockerD#2] D -- |Output| H[DockerD#n]  Prerequisites: Please take care that you have the correct docker_gwbridge IP in use if you\u0026rsquo;re about to use it in the docker daemon/prometheus context.\n$ ip addr show | grep docker_gwbridge 4: docker_gwbridge: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; inet 172.18.0.1/16 scope global docker_gwbridge  Also take care that your docker daemon is actually publishing some metrics to an endpoint. This can be done by enabling the experimental flag in a new json file.\n$ cat /etc/docker/daemon.json { \u0026quot;metrics-addr\u0026quot; : \u0026quot;0.0.0.0:9323\u0026quot;, \u0026quot;experimental\u0026quot; : true }  After inserting this just restart your docker daemon with systemctl restart docker.service and curl the address curl localhost:9323/metrics and make sure that you see some metrics. Thats all.\nUsage: Simply create or use your existing overlay network in your docker swarm and adjust the following snippet to your needs before running it.\ndocker service create -d \\ --name dockerd-export \\ --mode global \\ --network bloggo \\ -e INPUT=\u0026quot;172.18.0.1:9323\u0026quot; \\ -e OUTPUT=\u0026quot;9323\u0026quot; \\ zepp/rpi-socat:latest  -e INPUT=xxx is for the inputstream from the Hostgateway and -e OUTPUT is the output. --mode global means that the container runs on every available node, including masters. You can set a constraint to run it only on workernodes with --constraint 'node.role==worker' if you like.\nPlease feel free to contribute here.\n"
},
{
	"uri": "https://cest.io/tech/rpi-vinyl/",
	"title": "Vinyl and Raspberry Pi",
	"tags": [],
	"description": "",
	"content": " Since vinyl is getting bigger and bigger these days and lots of people have some old players somewhere in their cellar it might be usefull to read the following lines in order to upgrade it to something thats fits for the 21st century. Most of the time the \u0026ldquo;new generation players\u0026rdquo; don\u0026rsquo;t have the quality you\u0026rsquo;d expect when you compare them to some old models. You might also want to place your vinylplayer somewhere in the corner of your room and not next to your TV just to be able to plug it into your amplifier via the short cable.\nWhat I\u0026rsquo;m going to show you is pretty straigt forward:\n the necessary additional hardware (cheap or expensive -\u0026gt; your choice!) integrate vinylplayer to your wlan via Raspberry Pi (place it anywhere) expose your vinyl to your (local) network, join stream with different devices  Enough introduction, lets start with the hardware.\nGetting stuff together You\u0026rsquo;ll need a Raspberry Pi (I\u0026rsquo;m using a Zero W) and an external soundcard like the Behringer UCA222. This setup should be pretty comfortable because many people already have that. And also, if not already integrated, you\u0026rsquo;ll need a preamplifier, here you can choose how much you want to spend. You could also choose a preamp with USB out if you find something, then you won\u0026rsquo;t need the external soundcard. Just make sure that you can run it with your Raspberry. Since this is some standard hardware you can choose whatever you like. Just make sure you can connect everything afterwards.\nUnfortunately the Raspberry Pi has no Audio Input right now and I believe this feature won\u0026rsquo;t show up in the next couple of years. This is why you need an external device. If you find a device like the raspberry that has an audio input for cinch and linux on top, please let me know :)\n Behringer UCA222 PreAmp (exp) PreAmp (cheap) Raspberry Pi Zero W (or other)  I\u0026rsquo;ve had some bad experiences with the soundquality of low budged preamps but others tell me that I\u0026rsquo;m stupid and there is no difference. You better check that on your own. Maybe I can hear the money I\u0026rsquo;ve spend\u0026hellip;\nConnect everything! So what we\u0026rsquo;ll build is basically this:\ngraph LR; A[Vinylplayer]--|Cinch| B[PreAmp] B -- |Cinch| C[USB Audio IN/OUT] C -- |USB| D[RaspberryPi] D -- |WLAN| E[Any Device]  If your vinylplayer got an old DIN-connector, cut it and replace it with cinch. Or buy the corresponding converter for 5$. Now connect your vinyl player to the preamp, the preamp to the audio IN on the usb soundcard and then from the usb audiodevice (Out) to the raspberry. Straight forward, you can\u0026rsquo;t do much wrong here.\nSetting up the Raspberry Install Raspbian on your Raspberry and configure SSH so you can access it. It\u0026rsquo;s also better to use a static IP or a DNS name that doesn\u0026rsquo;t change because you want to access it with via URL later. I won\u0026rsquo;t cover these basics here, please check the internet for your type of Raspberry.\nSetting up the software You\u0026rsquo;ll use darkice to get your audiostuff from your usb-device and icecast will publish it afterwards to your local network. So basically darkice is doing the invisible work while icecast is publishing everything as a stream.\nsudo apt-get install darkice  Grab the content of darkice.cfg from my updated github repo and copy everything into /etc/darkice.cfg on your raspberry. If it\u0026rsquo;s not already present, create it via touch /etc/darkice.cfg.\n# this section describes general aspects of the live streaming session [general] duration = 0 # duration of encoding, in seconds. 0 means forever bufferSecs = 5 # size of internal slip buffer, in seconds reconnect = yes # reconnect to the server(s) if disconnected # this section describes the audio input that will be streamed [input] device = hw:1,0 # Alsa soundcard device for the audio input sampleRate = 44100 # sample rate in Hz. try 11025, 22050 or 44100 bitsPerSample = 16 # bits per sample. try 16 channel = 2 # channels. 1 = mono, 2 = stereo # this section describes a streaming connection to an IceCast2 server # there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7] # these can be mixed with [icecast-x] and [shoutcast-x] sections [icecast2-0] bitrateMode = vbr # variable bit rate format = vorbis # format of the stream: mp3 quality = 1.0 # quality of the stream sent to the server server = localhost # host name of the server port = 8000 # port of the IceCast2 server, usually 8000 password = fuckoff # source password to the IceCast2 server mountPoint = raspi # mount point of this stream on the IceCast2 server name = vinyl0r # name of the stream description = vinyl on raspi # description of the stream url = http://localhost # URL related to the stream genre = soulpunk # genre of the stream public = no # advertise this stream?  Adjust some settings (like the password) if you want. Otherwise it will just work somehow. Please check the input device for it\u0026rsquo;s name to make sure it\u0026rsquo;ll work. If you have no idea what your device is called use arecord -l.\n**** List of CAPTURE Hardware Devices **** card 1: CODEC [USB Audio CODEC], device 0: USB Audio [USB Audio] Subdevices: 0/1 Subdevice #0: subdevice #0  Yes, This is what you are looking for. It\u0026rsquo;s for this part in the config above:\n[input] device = hw:1,0  Hardware: Card 1, device 0. Adjust it if you have something different.\nInstall and configure Icecast sudo apt-get install icecast2  While the installation runs you\u0026rsquo;ll configure it. No hard stuff here. Just keep everything in sync with your settings.\n Configure Icecast? -\u0026gt; Yes Icecast Hostname? -\u0026gt; localhost Icecast Password? -\u0026gt; Wh0cares?! Icecast Relay Password? -\u0026gt; Wh0cares?! Icecast Admin Password? -\u0026gt; Wh0cares?!  Use it Take the IP address of the raspberry, add port 8000 to it (or whatever you configured above) and add the mountpoint (see configfile). It should look like this:\nhttp://192.168.0.2:8000/raspi.  If it\u0026rsquo;s working. Nice. If not, start again or post your questions to my public Slackchannel.\nYou can add that link to almost any relevant platform like Kodi/XBMC, any Browser or even your main Amplifier could have that feature. Publish the Port to the internet if you like, but take care of the security first!\nMake it smart with systemd (optional) If you don\u0026rsquo;t want to do anything manually after a restart of the Raspberry, copy the contents of the darkice servicefile to /lib/systemd/system.\nTo do so, go root!\nsudo -i touch /lib/systemd/system/darkice_unit.service  double check:\nls -lah /lib/systemd/system | grep dark -rw-r--r-- 1 root root 193 Oct 31 23:02 darkice_unit.service  Copy this into the unitfile you just created:\n[Unit] Description=DarkIce is used to enable Icecast After=network.target [Service] Type=simple ExecStart=/usr/bin/darkice \u0026gt; /dev/null Restart=on-failure [Install] WantedBy=multi-user.target  afterwards, let systemd take care of restarts.\nsystemctl enable darkice_unit.service  This will place a symlink for darkice to /etc/systemd/system/multi-user.target.wants/ in order to make it persistent. Otherwise it\u0026rsquo;s gone after the next reboot.\nnow you can checkout everything with systemd tools:\nsystemctl status darkice_unit.service ... systemctl status icecast2.service ... systemctl restart darkice_unit.service ... systemctl stop icecast2.service ...  Thats the magic. This will save you some time in the future.\n"
},
{
	"uri": "https://cest.io/tech/",
	"title": "Technology",
	"tags": [],
	"description": "",
	"content": " techstuff Basics Linux related stuff I need to store somewhere\n"
},
{
	"uri": "https://cest.io/",
	"title": "about",
	"tags": [],
	"description": "",
	"content": "Hi, and goodbye.\n"
},
{
	"uri": "https://cest.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cest.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]